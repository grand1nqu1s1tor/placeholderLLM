version: "3.8"

services:
  # Run the ETL to fetch Twitter Data
  pull_twitter:
    build: .
    container_name: twikit-container
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      - mongo
      - kafka
    environment:
      - MONGO_URI=mongodb://mongo:27017/twitter_etl
    stdin_open: true
    tty: true
    command: [ "sh", "-c", "python pull_trending_tweets.py & python pull_ai_tweets.py & wait" ]

  # Run the CDC to detect new Twitter Data and send to Kafka in Batches
  cdc_service:
    build: .
    container_name: cdc-to-kafka
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MONGO_URI=mongodb://mongo:27017/twitter_etl
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=tweets_cdc
    command: [ "python", "cdc_to_kafka.py" ]  # Runs CDC script

  # Consumer for the Tweets
  kafka_consumer:
    build: .
    container_name: kafka-consumer
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=tweets_cdc
    command: [ "python", "kafka_to_embeddings.py" ]  # Runs Kafka consumer script

  # Stores our Tweets JSON objects
  mongo:
    image: mongo:7.0
    container_name: mongo
    command: [ "mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    ports:
      - "27017:27017"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27017", "--quiet", "--eval", "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}) }" ]
      interval: 5s
      timeout: 30s
      start_period: 10s
      retries: 10
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb

  # ZooKeeper for Kafka
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: always

  # Kafka Broker
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092  #  Ensures Kafka is accessible
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092  #  Fixes hostname issue
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181  #  Corrected Bitnami format
      - ALLOW_PLAINTEXT_LISTENER=yes  #  Ensures no auth issues
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true  #  Ensure topics are auto-created
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 10s
      retries: 5
    restart: always

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    restart: always

  fastapi_app:
    build: .
    container_name: api-container
    volumes:
      - .:/app  # This mounts the local folder inside the container
    ports:
      - "8000:8000"
    depends_on:
      - qdrant
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    command: [ "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000", "--reload" ]

# MongoDB Data Volumes
volumes:
  mongo_data:
  mongo_config:
  qdrant_storage:
